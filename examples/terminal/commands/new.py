import argparse
import cmd2
import os
from pydoc import locate

from examples.terminal.core.state import CFState
from examples.terminal.core.config import Config
# from counterfit import reporting
from counterfit.core.output import CFPrint

import counterfit.reporting as reporting

target_dt_obj_map = {
    'text': reporting.TextReportGenerator,
    'image': reporting.ImageReportGenerator,
    'tabular': reporting.TabularReportGenerator
}


def get_datatypes():
    return list(target_dt_obj_map.keys()) 


def new_cmd(args: argparse.Namespace) -> None:
    """Optional wizard to aid in creating a new attack target.
    """
    print ('args: ', args) ## remove it
    target_name = args.name.replace(" ", "")
    
    if not args.data_type:
        target_data_type = ""
    else:
        target_data_type = args.data_type

    ## remove it
    #pdb.set_trace()
    cwd = os.getcwd()
    print("Current Working Directory:", cwd)

    if target_name not in os.listdir(Config.targets_path):
        try:
            #os.mkdir(f"{Config.targets_path}/{target_name}")
            with open(f"{Config.targets_path}/{target_name}.py", "w") as f:
                f.write(
                    f"""

# Generated by counterfit #

from counterfit.core.targets import CFTarget

class {target_name.capitalize()}(CFTarget):
    target_name = "{target_name}"
    data_type = "{target_data_type}"
    task = ""
    endpoint = ""
    input_shape = ()
    output_classes = []
    classifier = ""
    sample_input_path = ""
    X = []

    def load(self):
        self.X = []

    def predict(self, x):
        return x
"""
                )
        
            with open(f"{Config.targets_path}/__init__.py", "a") as init:
                init.write(
                    f"\nfrom .{target_name} import {target_name.capitalize()}"
                )
            
        except Exception as e:
            CFPrint.warn(f"Failed to write target file: {e}.")
    else:
        CFPrint.warn(
            f"{target_name} already exists. Choose a new name.")

    # Instantiate the new target
    module_path = ".".join(
        f"{Config.targets_path}/{target_name}/{target_name}/{target_name.capitalize()}".split("/"))
    new_target = locate(module_path)
    print("success!")
    # Add the target to the session
    #CFState.state().add_target(target_name, new_target())
    
    #remove it
    '''
    test_target = {
        cls, 
        data_type: "text", 
        endpoint: "satellite/satellite-image-params-airplane-stadium.h5", 
        output_classes: ["airplane", "stadium"],
        classifier: str,
        input_shape: tuple,
        load_func: object,
        predict_func: object,
        X: list
    }
    '''
    #CFState.state().build_new_target(test_target)


    # Load the target
    #target = CFState.state().load_target(target_name)
    #target = CFState.state().reload_target()

    # Set it as the active target
    #CFState.state().set_active_target(target)


new_args = cmd2.Cmd2ArgumentParser()
new_args.add_argument("-n", "--name", help="a name for the new target", required=True)
new_args.add_argument("-d", "--data_type", choices=get_datatypes(), help="Send a randomly selected sample to the target model")
